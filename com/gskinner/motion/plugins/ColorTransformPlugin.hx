/**                                                               *                                                               ** Initial haXe port by Brett Johnson, http://now.periscopic.com   ** Project site: code.google.com/p/gtweenhx/                       ** . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . *** ColorTransformPlugin by Grant Skinner. Nov 3, 2009* Visit www.gskinner.com/blog for documentation, updates and more free code.*** Copyright (c) 2009 Grant Skinner* * Permission is hereby granted, free of charge, to any person* obtaining a copy of this software and associated documentation* files (the "Software"), to deal in the Software without* restriction, including without limitation the rights to use,* copy, modify, merge, publish, distribute, sublicense, and/or sell* copies of the Software, and to permit persons to whom the* Software is furnished to do so, subject to the following* conditions:* * The above copyright notice and this permission notice shall be* included in all copies or substantial portions of the Software.* * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,* EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES* OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND* NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT* HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR* OTHER DEALINGS IN THE SOFTWARE.**/package com.gskinner.motion.plugins;		import com.gskinner.motion.GTween;	import flash.geom.ColorTransform;	import com.gskinner.motion.plugins.IGTweenPlugin;	#if !flash8 import flash.display.DisplayObject; #end		/**	* Plugin for GTween. Applies a color transform or tint to the target based on the	* "redMultiplier", "greenMultiplier", "blueMultiplier", "alphaMultiplier", "redOffset",	* "greenOffset", "blueOffset", "alphaOffset", and/or "tint" tween values. The tint	* value is a 32 bit color, where the alpha channel represents the strength of the tint.	* For example 0x8000FF00 would apply a green tint at 50% (0x80) strength.	* <br/><br/>	* Supports the following <code>pluginData</code> properties:<UL>	* <LI> ColorTransformEnabled: overrides the enabled property for the plugin on a per tween basis.	* </UL>	**/	class ColorTransformPlugin implements IGTweenPlugin {			// Static interface:		/** Specifies whether this plugin is enabled for all tweens by default. **/		public static var enabled:Bool;//=true;				/** @private **/		//private static var installed:Bool;// = false;		private static var instance:ColorTransformPlugin;		/** @private **/		private static var tweenProperties:Array<String>;// = ["redMultiplier","greenMultiplier","blueMultiplier","alphaMultiplier","redOffset","greenOffset","blueOffset","alphaOffset","tint"];				static function __init__() {			enabled=true;			//installed=false;			tweenProperties= ["redMultiplier","greenMultiplier","blueMultiplier","alphaMultiplier","redOffset","greenOffset","blueOffset","alphaOffset","tint"];		}				/**		* Installs this plugin for use with all GTween instances.		**/		/*public static function install():Void {			if (installed) { return; }			installed = true;			GTween.installPlugin(ColorTransformPlugin,tweenProperties,true);		}*/				public static function install():Void {			if (instance != null) { return; }			instance = new ColorTransformPlugin();			GTween.installPlugin(instance,tweenProperties);		}				//Empty constructor		function new(){}			// Public methods:		/** @private **/		public function init(tween:GTween, name:String, value:Float):Float {			if (!((enabled && tween.pluginData.ColorTransformEnabled == null) || tween.pluginData.ColorTransformEnabled) #if !flash8 && Std.is(tween.target,DisplayObject)#end ) { return value; }			var ct:ColorTransform;				#if js //jeash					var dObj:DisplayObject =cast(tween.target,DisplayObject);					ct=dObj.transform.GetColorTransform();				#else				 	ct= tween.target.transform.colorTransform;				#end						if (name == "tint") {				// try to calculate initial tint:								var a:Int = cast(Math.min(1,Math.floor(1-ct.redMultiplier)),Int);				var r:Int = cast(Math.min(0xFF,Math.floor(ct.redOffset*a)),Int);				var g:Int = cast(Math.min(0xFF,Math.floor(ct.greenOffset*a)),Int);				var b:Int = cast(Math.min(0xFF,Math.floor(ct.blueOffset*a)),Int);				var tint:Float = a*0xFF<<24 | r<<16 | g<<8 | b;				return tint;			} else {				//return tween.target.transform.colorTransform[name];				#if js					switch(name){						case "redMultiplier":							return ct.redMultiplier;						case "greenMultiplier":							return ct.greenMultiplier;											case "blueMultiplier":							return ct.blueMultiplier;						case "alphaMultiplier":							return ct.alphaMultiplier;						case"redOffset":							return ct.redOffset;						case"greenOffset":							return ct.greenOffset;						case"blueOffset":							//trace("CTP "+ct.blueOffset);							return ct.blueOffset;						case"alphaOffset":							return ct.alphaOffset;						default:							return Math.NaN;						}				#else						return Reflect.field(ct,name);				#end			}		}				/** @private **/		public function tween(tween:GTween, name:String, value:Float, initValue:Float, rangeValue:Float, ratio:Float, end:Bool):Float {			if (!((tween.pluginData.ColorTransformEnabled == null && enabled) || tween.pluginData.ColorTransformEnabled) #if !flash8 && Std.is(tween.target,DisplayObject)#end) { return value; }			var ct:ColorTransform;						#if js //jeash				var dObj:DisplayObject =cast(tween.target,DisplayObject);				ct=dObj.transform.GetColorTransform();			#else				ct = tween.target.transform.colorTransform;			#end			if (name == "tint") {				var IInitValue:Int=Math.floor(initValue);				var aA:Int = IInitValue>>24&0xFF;				var rA:Int = IInitValue>>16&0xFF;				var gA:Int = IInitValue>>8&0xFF;				var bA:Int = IInitValue&0xFF;				var tint:Int = IInitValue+ Math.floor(rangeValue);//rangeValue>>0;				var a:Float = aA+ratio*((tint>>24&0xFF)-aA);				var r:Float = rA+ratio*((tint>>16&0xFF)-rA);				var g:Float = gA+ratio*((tint>>8&0xFF)-gA);				var b:Float = bA+ratio*((tint&0xFF)-bA);				var mult:Float = 1-a/0xFF;				#if js //jeash					dObj.transform.SetColorTransform(new ColorTransform(mult,mult,mult,ct.alphaMultiplier,r,g,b,ct.alphaOffset));				#else					tween.target.transform.colorTransform = new ColorTransform(mult,mult,mult,ct.alphaMultiplier,r,g,b,ct.alphaOffset);				#end			} else {								#if js //jeash										switch(name){					case "redMultiplier":						ct.redMultiplier=value;					case "greenMultiplier":						ct.greenMultiplier=value;										case "blueMultiplier":						ct.blueMultiplier=value;					case "alphaMultiplier":						ct.alphaMultiplier=value;					case"redOffset":						ct.redOffset=value;					case"greenOffset":						ct.greenOffset=value;					case"blueOffset":						trace("SET "+value);						ct.blueOffset=value;					case"alphaOffset":						ct.alphaOffset=value;					default:					}					trace(ct.blueOffset);										dObj.transform.SetColorTransform(ct);				#else //flash					Reflect.setField(ct,name,value);//ct[name] = value;					tween.target.transform.colorTransform = ct;				#end							}						// tell GTween not to use the default assignment behaviour:			return Math.NaN;		}	}	