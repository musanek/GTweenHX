/**                                                               *                                                               ** Initial haXe port by Brett Johnson, http://now.periscopic.com   ** Project site: code.google.com/p/gtweenhx/                       ** . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . *** BlurPlugin by Grant Skinner. Nov 3, 2009* Visit www.gskinner.com/blog for documentation, updates and more free code.*** Copyright (c) 2009 Grant Skinner* * Permission is hereby granted, free of charge, to any person* obtaining a copy of this software and associated documentation* files (the "Software"), to deal in the Software without* restriction, including without limitation the rights to use,* copy, modify, merge, publish, distribute, sublicense, and/or sell* copies of the Software, and to permit persons to whom the* Software is furnished to do so, subject to the following* conditions:* * The above copyright notice and this permission notice shall be* included in all copies or substantial portions of the Software.* * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,* EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES* OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND* NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT* HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR* OTHER DEALINGS IN THE SOFTWARE.**/package com.gskinner.motion.plugins;		import com.gskinner.motion.GTween;	import flash.filters.BlurFilter;	import com.gskinner.motion.plugins.IGTweenPlugin;		/**	* Plugin for GTween. Applies a blur filter to the target based on the "blur", "blurX", and/or "blurY" tween values.	* <br/><br/>	* If a blur filter does not already exist on the tween target, the plugin will create one.	* Note that this may conflict with other plugins that use filters. If you experience problems,	* try applying a blur filter to the target in advance to avoid this behaviour.	* <br/><br/>	* Supports the following <code>pluginData</code> properties:<UL>	* <LI> BlurEnabled: overrides the enabled property for the plugin on a per tween basis.	* <LI> BlurData: Used internally.	* </UL>	**/	class BlurPlugin implements IGTweenPlugin {			// Static interface:		/** Specifies whether this plugin is enabled for all tweens by default. **/		public static var enabled:Bool;//=true;				/** @private **/		private static var instance:BlurPlugin;		/** @private **/		private static var tweenProperties:Array<String>;// = ["blurX","blurY","blur"];						static function __init__() {			enabled=true;			tweenProperties = ["blurX","blurY","blur"];		}				/**		* Installs this plugin for use with all GTween instances.		**/		public static function install():Void {			if (instance != null) { return; }			#if cpp				throw("nme.filters.BlurFilter does not expose blurX, blurY as of 2.0.1");			#elseif js				throw("jeash.filters.BlurFilter is not implemented");			#else				instance = new BlurPlugin();				GTween.installPlugin(instance,tweenProperties);			#end		}				//Empty constructor		function new(){}			// Public methods:		/** @private **/		public function init(tween:GTween, name:String, value:Float):Float {			#if !(js||cpp)			if (!((tween.pluginData.BlurEnabled == null && enabled) || tween.pluginData.BlurEnabled)) { return value; }						// try to find a blur filter:			var f:Array<Dynamic> = tween.target.filters;			for(i in 0...f.length){				if (Std.is(f[i],BlurFilter)) {					// found one.					var blurF:BlurFilter = cast(f[i],BlurFilter);										// save off its index for future reference:					tween.pluginData.BlurData = {index:i}										// return our initial values from it:									if (name == "blur") {						return (blurF.blurX+blurF.blurY)/2; }//(blurF.blurX+blurF.blurY)/2;					else if(name =="blurX") { return blurF.blurX; }////} else { return blurF[name]; }					else { return blurF.blurY; }				}			}			#end			// didn't find one, so our blur starts at 0:			return 0;		}				/** @private **/		public function tween(tween:GTween, name:String, value:Float, initValue:Float, rangeValue:Float, ratio:Float, end:Bool):Float {			#if !(js||cpp)			// don't run if we're not enabled:			if (!((tween.pluginData.BlurEnabled == null && enabled) || tween.pluginData.BlurEnabled)) { return value; }						// grab the tween specific data from pluginData:			var data:Dynamic = tween.pluginData.BlurData;			if (data == null) { data = initTarget(tween); }			// grab the filter:			var f:Array<Dynamic> = tween.target.filters;			var blurF:BlurFilter = cast(f[data.index],BlurFilter);			if (blurF == null) { return value; }						// update the filter and set it back to the target:			if (name == "blur") {blurF.blurX = blurF.blurY = value; }			else if(name == "blurX"){blurF.blurX = value; }			else {blurF.blurY = value; } 			tween.target.filters = f;			// clean up if it's the end of the tween:			if (end) {				Reflect.deleteField(tween.pluginData,"BlurData");				}			#end			// tell GTween not to use the default assignment behaviour:			return Math.NaN;		}			// Private methods:		/** @private **/		private function initTarget(tween:GTween):Dynamic {			var f:Array<Dynamic> = tween.target.filters;			f.push(new BlurFilter(0,0,1));			tween.target.filters = f;			return tween.pluginData.BlurData = {index:f.length-1};		}			}