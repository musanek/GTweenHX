/*** JeashDisplayObjectPlugin by Brett Johnson. April 4, 2011** Copyright (c) 2011 Brett Johnson, http://now.periscopic.com* * Permission is hereby granted, free of charge, to any person* obtaining a copy of this software and associated documentation* files (the "Software"), to deal in the Software without* restriction, including without limitation the rights to use,* copy, modify, merge, publish, distribute, sublicense, and/or sell* copies of the Software, and to permit persons to whom the* Software is furnished to do so, subject to the following* conditions:* * The above copyright notice and this permission notice shall be* included in all copies or substantial portions of the Software.* * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,* EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES* OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND* NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT* HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR* OTHER DEALINGS IN THE SOFTWARE.**/package com.gskinner.motion.plugins.jeash;		import com.gskinner.motion.GTween;	import com.gskinner.motion.plugins.IGTweenPlugin;	#if js	import flash.display.DisplayObject;	#end	/**	* Plugin for GTween. Directly modifies properties of the flash.display.DisplayObject,	* it's subclasses, and classes remapped from that. This is specifically important in 	* javascript (jeash) because the get/set methods are not called by reflection on a 	* DisplayObject at runtime.	* <br/><br/>	* Supports the following <code>pluginData</code> properties:<UL>	* <LI> DisplayObjectEnabled: overrides the enabled property for the plugin on a per tween basis.	* </UL>	**/	class JeashDisplayObjectPlugin implements IGTweenPlugin {				// Static interface:		/** Specifies whether this plugin is enabled for all tweens by default. **/		public static var enabled:Bool;				/** @private **/		private static var instance:JeashDisplayObjectPlugin;		/** @private **/		private static var tweenProperties:Array<String>;				static function __init__() {			#if js			enabled=true;			tweenProperties= ["x","y","alpha","rotation","scaleX","scaleY","width","height"];			#else			enabled=false;			tweenProperties=[];			#end		}				/**		* Installs this plugin for use with all GTween instances.		**/		public static function install():Void {			if (instance != null) { return; }			instance = new JeashDisplayObjectPlugin();			GTween.installPlugin(instance,tweenProperties);		}				//Empty constructor		function new(){}				// Public methods:		/** @private **/		public function init(tween:GTween, name:String, value:Float):Float {			#if js			if (!((enabled && tween.pluginData.DisplayObjectEnabled == null) || tween.pluginData.DisplayObjectEnabled)) { return value; }				if(Std.is(tween.target,DisplayObject)){					var dObj:DisplayObject=cast(tween.target,DisplayObject);					switch(name){						case "x":							return dObj.x;						case "y":							return dObj.y;						case "alpha":							return dObj.alpha;						case "rotation":							return dObj.rotation;						case "scaleX":							return dObj.scaleX;						case "scaleY":							return dObj.scaleY;						case "width":							return dObj.width;						case "height":							return dObj.height;						default:					}				}				#end				return value;		}				/** @private **/		public function tween(tween:GTween, name:String, value:Float, initValue:Float, rangeValue:Float, ratio:Float, end:Bool):Float {			#if js			if (!((enabled && tween.pluginData.DisplayObjectEnabled == null) || tween.pluginData.DisplayObjectEnabled)) { return value; }				if(Std.is(tween.target,DisplayObject)){										var dObj:DisplayObject=cast(tween.target,DisplayObject);					switch(name){						case "x":							dObj.x=value;						case "y":							dObj.y=value;						case "alpha":							dObj.alpha=value;						case "rotation":							dObj.rotation=value;						case "scaleX":							dObj.scaleX=value;						case "scaleY":							dObj.scaleY=value;						case "width":							dObj.width=value;						case "height":							dObj.height=value;						default:							return value;					}				}							// tell GTween not to use the default assignment behaviour:			return Math.NaN;			#else			return value;			#end		}	}	